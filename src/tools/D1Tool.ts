/**
 * @file D1Tool.ts
 * @description Provides a robust, type-safe interface for interacting with Cloudflare D1 databases.
 * This tool is designed for AI agents to perform database operations. It ensures that all
 * queries are parameterized to prevent SQL injection vulnerabilities, a critical security
 * consideration when executing commands generated by an AI.
 */

import { D1Database, D1Result } from '@cloudflare/workers-types';

interface Env {
    [key: string]: D1Database;
}

export class D1Tool {
    private env: Env;

    /**
     * @description Initializes the D1Tool with the worker's environment.
     * @param {Env} env - The Cloudflare worker environment containing D1 bindings.
     */
    constructor(env: Env) {
        this.env = env;
    }

    /**
     * @description Retrieves a D1 database binding from the environment.
     * Throws an error if the specified binding name is not found.
     * @param {string} database_binding - The name of the D1 binding in wrangler.toml.
     * @returns {D1Database} The D1 database instance.
     * @private
     */
    private getDb(database_binding: string): D1Database {
        const db = this.env[database_binding];
        if (!db) {
            throw new Error(`D1 database binding '${database_binding}' not found.`);
        }
        return db;
    }

    /**
     * @description Executes a SQL query against the specified D1 database using parameterized statements
     * to prevent SQL injection. This is the primary method for safe data retrieval.
     * @param {string} database_binding - The name of the D1 binding.
     * @param {string} sql - The SQL query string with '?' placeholders for parameters.
     * @param {any[]} [params] - An array of parameters to bind to the SQL query.
     * @returns {Promise<D1Result>} A promise that resolves with the query results.
     */
    async query(database_binding: string, sql: string, params: any[] = []): Promise<D1Result> {
        try {
            const db = this.getDb(database_binding);
            const stmt = db.prepare(sql).bind(...params);
            return await stmt.all();
        } catch (error) {
            console.error(`D1Tool query failed for binding '${database_binding}':`, error);
            throw new Error(`D1 query failed: ${error.message}`);
        }
    }
}